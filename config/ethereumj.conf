# HOCON (Human-Optimized Config Object Notation) syntax. For details refer to:
# https://github.com/typesafehub/config/blob/master/HOCON.md

# specify if the mechanism
# to discover more and more
# peers and check the already
# discovered peers is on
peer.discovery = {

    # if peer discovery is off
    # the peer window will show
    # only what retrieved by active
    # peer [true/false]
    enabled = false

    # number of workers that
    # tastes the peers for being
    # online [1..10]
    workers = 3

    # List of the peers to start
    # the search of the online peers
    # values: [ip:port, ip:port, ip:port ...]
    ip.list = [
    ]
}

# Network id
peer.networkId = 210

peer.active = [
    //    {
    //        ip = 207.12.89.101
    //        port = 30303
    ////        nodeId = e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c
    //        nodeName = "my poc-9-peer-1"
    //    },
]

# the folder resources/genesis
# contains several versions of
# genesis configuration according
# to the network the peer will run
genesis = genesis.json

# The protocols supported by peer
peer.capabilities = [eth, shh]

# Peer for server to listen for incoming
# connections
peer.listen.port = 30335

peer.privateKey = 3ec771c31cac8c0dba77a69e503765701d3c2bb62435888d4ffa38fed60c445c
peer.nodeId = 3973cb86d7bef9c96e5d589601d788370f9e24670dcba0480c0b3b1b0647d13d0f0fffed115dd2d4b5ca1929287839dcd4e77bdc724302b44ae48622a8766ee6

# Private key of the peer
# The key is generated by default on the first run and stored in the database folder
# If you have your own peer ID specify its private key here
# derived nodeId = dead745c1dbcde518b48e52aca1e8d5ba666005a2c8804e39826c6080fb11c1e8abe41d1e41896e871f204f790a90fa9781744cccecf492212192a7c56e7673b
# privateKey = f67c4032a7ff79bbfa7a780331b235c4eb681d51a0704cb1562064fb6c4bced4

# connection timeout for trying to
# connect to a peer [seconds]
peer.connection.timeout = 2

# the time we wait to the network
# to approve the transaction, the
# transaction got approved when
# include into a transactions msg
# retrieved from the peer [seconds]
transaction.approve.timeout = 3

# the parameter specifies how much
# time we will wait for a message
# to come before closing the channel
peer.channel.read.timeout = 15

# default directory where we keep
# basic Serpent samples relative
# to home.dir
samples.dir = samples

# everytime the application starts
# the existing database will be
# destroyed and all the data will be
# downloaded from peers again
database.reset = false

# place to save physical storage files
database.dir = database

# this string is computed
# to be eventually the address
# that get the miner reward
coinbase.secret = monkey

# for testing purposes
# all the state will be dumped
# in JSON form to [dump.dir]
# if [dump.full] = true
# possible values [true/false]
dump.full = false
dump.dir = dmp

# This defines the vmtrace dump
# to the console and the style
# -1 for no block trace
# styles: [pretty/standard+] (default: standard+)
dump.block = -1
dump.style = pretty

# clean the dump dir each start
dump.clean.on.restart = true

# make changes to tracing options
# starting from certain block
# -1 don't make any tracing changes
trace.startblock = -1

# invoke vm program on
# message received,
# if the vm is not invoked
# the balance transfer
# occurs anyway  [true/false]
play.vm = true

# project version auto copied during build phase
project.version = 0.6.1

# hello phrase will be included in
# the hello message of the peer
hello.phrase = Dev

# this property used
# mostly for a debug purpose
# so if you don't know exactly how
# to apply it leave to be [-1]
#
# ADVANCED: if we want to load a root hash
# for db not from the saved block chain (last block)
# but any manual hash this property will help.
# values [-1] - load from db
#        [hex hash 32 bytes] root hash
root.hash.start = null

# if set true, json tests will be loaded from local repository
GitHubTests.VMTest.loadLocal = false

# Key value data source values: [leveldb/redis/mapdb]
keyvalue.datasource = leveldb

# structured trace
# is the trace being
# collected in the
# form of objects and
# exposed to the user
# in json or any other
# convenient form.
vm.structured.trace = false
vm.structured.dir = vmtrace
vm.structured.storage.dictionary.enabled = false

# eth sync process
sync {

    # block chain synchronization
    # can be: [true/false]
    enabled = false

    # maximum blocks hashes to ask.
    # sending GET_BLOCK_HASHES msg
    # we specify number of block we want
    # to get, recomendec value [1..1000]
    # Default: unlimited
    max.hashes.ask = 1000

    # maximum blocks to ask,
    # when downloading the chain
    # sequenteally sending GET_BLOCKS msg
    # we specify number of blocks we want
    # to get, recomendec value [1..120]
    max.blocks.ask = 100

    # minimal peers count
    # used in sync process
    # sync may use more peers
    # than this value
    # but always trying to get
    # at least this number from discovery
    peer.count = 1

    # Uncomment this param
    # to use a strict Eth version.
    # Useful for testing
    # version = 62
}

mine {
    extraDataHex = "cccccccccccccccccccc"
    cpuMineThreads = 2
}